SELECT Coursename, grade FROM CourseOfferRegistrations WHERE StudentId = %1% AND DegreeId = %2% AND Grade >=5 ORDER BY year, quartile, CourseOfferID;
SELECT DISTINCT studentid FROM (SELECT studentregistrationstodegrees.StudentregistrationId FROM completeddegrees, studentregistrationstodegrees WHERE studentregistrationstodegrees.studentregistrationid = completeddegrees.studentregistrationid AND completeddegrees.gpa > %1% EXCEPT (SELECT studentRegistrationId FROM courseofferregistrations WHERE grade < 5)) AS excelent, studentregistrationstodegrees WHERE studentregistrationstodegrees.studentregistrationId = excelent.studentregistrationid ORDER BY studentid;
SELECT StudentRegistrationsToDegrees.DegreeId, CAST(COUNT(*) filter (WHERE Students.Gender = 'F') AS FLOAT) / CAST(COUNT(*) AS FLOAT) AS percentage FROM StudentRegistrationsToDegrees, Students WHERE StudentRegistrationsToDegrees.StudentId = Students.StudentId AND NOT EXISTS (SELECT * FROM completeddegrees WHERE completeddegrees.StudentRegistrationId = StudentRegistrationsToDegrees.StudentRegistrationId) GROUP BY StudentRegistrationsToDegrees.DegreeId ORDER BY StudentRegistrationsToDegrees.DegreeId;
WITH StudentsinDegree AS (SELECT distinct students.studentid, students.gender from students, studentregistrationstodegrees, degrees where students.studentid = studentRegistrationsToDegrees.studentid AND studentregistrationstodegrees.degreeid = degrees.degreeid AND Degrees.Dept = %1%) SELECT (SUM(CASE WHEN Gender='F' THEN 1 ELSE 0 END)::float / COUNT(studentsindegree.studentid)::float ) AS percentage FROM studentsindegree;
SELECT CR.CourseId, COUNT(CASE WHEN CR.Grade >= %1% THEN 1 END)::float/count(CR.Grade)::float AS percentagePassing FROM CourseofferRegistrations CR WHERE CR.Grade IS NOT NULL GROUP BY CR.CourseId ORDER BY CR.CourseId;
WITH max_grade_pc_1_2018 AS (SELECT COR.courseofferid, max(COR.grade) AS max_grade FROM courseofferregistrations COR WHERE COR.year = 2018 AND COR.quartile =1 GROUP BY COR.courseofferid), counts_excellent AS (SELECT studentID , count(courseofferregistrations.courseofferid) AS counts FROM max_grade_pc_1_2018, courseofferregistrations WHERE max_grade_pc_1_2018.courseofferid = courseofferregistrations.courseofferid AND max_grade_pc_1_2018.max_grade = courseofferregistrations.grade GROUP BY studentid) SELECT studentID, counts FROM counts_excellent WHERE counts >= %1%;
SELECT DegreeId, BirthyearStudent, Gender, avg(GPA) AS avgGrade FROM ects_per_degree as gpa, Students, (SELECT StudentId, studentRegistrationId FROM ects_per_degree EXCEPT (SELECT completedDegrees.StudentId, completeddegrees.studentRegistrationId FROM CompletedDegrees)) AS Active WHERE GPA.StudentRegistrationId = Active.StudentRegistrationId  AND active.StudentId = Students.StudentId GROUP BY CUBE (DegreeId, BirthYearStudent, Gender) ORDER BY DegreeId ASC, BirthYearStudent ASC, Gender ASC;
WITH studentcounts as (SELECT courseofferid, year, quartile, courseid, count(studentregistrationid) as studentcount FROM courseofferregistrations GROUP BY courseofferid, year, quartile, courseid), assistantcounts as (SELECT courseofferid, count(studentregistrationid) as assistantcount FROM studentassistants GROUP BY courseofferid) SELECT courses.coursename, year, quartile from studentcounts, assistantcounts, courses where cast(studentcount as float)/50 > assistantcount AND studentcounts.courseofferid = assistantcounts.courseofferid AND studentcounts.courseid = courses.courseid ORDER BY studentcounts.CourseOfferId;
